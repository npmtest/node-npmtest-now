{"/home/travis/build/npmtest/node-npmtest-now/test.js":"/* istanbul instrument in package npmtest_now */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-now/lib.npmtest_now.js":"/* istanbul instrument in package npmtest_now */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_now = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_now = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-now/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-now && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_now */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_now\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_now.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_now.rollup.js'] =\n            local.assetsDict['/assets.npmtest_now.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_now.__dirname + '/lib.npmtest_now.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/bin/now.js":"#!/usr/bin/env node\n\n// Native\nconst path = require('path');\n\n// Packages\nconst nodeVersion = require('node-version');\nconst updateNotifier = require('update-notifier');\nconst chalk = require('chalk');\n\n// Ours\nconst errorHandlers = require('../lib/error');\nconst pkg = require('../lib/pkg');\n\n// Throw an error if node version is too low\nif (nodeVersion.major < 6) {\n  errorHandlers.error(\n    'Now requires at least version 6 of Node. Please upgrade!'\n  );\n  process.exit(1);\n}\n\nif (!process.pkg) {\n  const notifier = updateNotifier({ pkg });\n  const update = notifier.update;\n\n  if (update) {\n    let message = `Update available! ${chalk.red(update.current)} → ${chalk.green(update.latest)} \\n`;\n    message += `Run ${chalk.magenta('npm i -g now')} to update!\\n`;\n    message += `${chalk.magenta('Changelog:')} https://github.com/zeit/now-cli/releases/tag/${update.latest}`;\n\n    notifier.notify({ message });\n  }\n}\n\n// This command will be run if no other sub command is specified\nconst defaultCommand = 'deploy';\n\nconst commands = new Set([\n  defaultCommand,\n  'help',\n  'list',\n  'ls',\n  'rm',\n  'remove',\n  'alias',\n  'aliases',\n  'ln',\n  'domain',\n  'domains',\n  'dns',\n  'cert',\n  'certs',\n  'secret',\n  'secrets',\n  'cc',\n  'billing',\n  'upgrade',\n  'downgrade',\n  'open'\n]);\n\nconst aliases = new Map([\n  ['ls', 'list'],\n  ['rm', 'remove'],\n  ['ln', 'alias'],\n  ['aliases', 'alias'],\n  ['domain', 'domains'],\n  ['cert', 'certs'],\n  ['secret', 'secrets'],\n  ['cc', 'billing'],\n  ['downgrade', 'upgrade']\n]);\n\nlet cmd = defaultCommand;\nconst args = process.argv.slice(2);\nconst index = args.findIndex(a => commands.has(a));\n\nif (index > -1) {\n  cmd = args[index];\n  args.splice(index, 1);\n\n  if (cmd === 'help') {\n    if (index < args.length && commands.has(args[index])) {\n      cmd = args[index];\n      args.splice(index, 1);\n    } else {\n      cmd = defaultCommand;\n    }\n\n    args.unshift('--help');\n  }\n\n  cmd = aliases.get(cmd) || cmd;\n}\n\n// Don't throw a useless error message when running `now help help`\n// rather show the general help and be useful\nif (cmd === 'help') {\n  cmd = 'deploy';\n}\n\nconst bin = path.resolve(__dirname, 'now-' + cmd + '.js');\n\n// Prepare process.argv for subcommand\nprocess.argv = process.argv.slice(0, 2).concat(args);\n\n// Load sub command\n// With custom parameter to make \"pkg\" happy\nrequire(bin, 'may-exclude');\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/lib/error.js":"// Packages\nconst ms = require('ms');\nconst chalk = require('chalk');\n\nconst error = require('./utils/output/error');\n\nfunction handleError(err) {\n  if (err.status === 403) {\n    error(\n      'Authentication error. Run `now -L` or `now --login` to log-in again.'\n    );\n  } else if (err.status === 429) {\n    if (err.retryAfter === 'never') {\n      error(err.message);\n    } else if (err.retryAfter === null) {\n      error('Rate limit exceeded error. Please try later.');\n    } else {\n      error(\n        'Rate limit exceeded error. Try again in ' +\n          ms(err.retryAfter * 1000, { long: true }) +\n          ', or upgrade your account by runnung ' +\n          `${chalk.gray('`')}${chalk.cyan('now upgrade')}${chalk.gray('`')}`\n      );\n    }\n  } else if (err.userError) {\n    error(err.message);\n  } else if (err.status === 500) {\n    error('Unexpected server error. Please retry.');\n  } else {\n    error(`Unexpected error. Please try later. (${err.message})`);\n  }\n}\n\nmodule.exports = {\n  handleError,\n  error\n};\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/lib/utils/output/error.js":"const chalk = require('chalk');\n\n// Prints an error message\nmodule.exports = msg => {\n  if (msg instanceof Error) {\n    msg = msg.message;\n  }\n\n  console.error(`${chalk.red('> Error!')} ${msg}`);\n};\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/lib/pkg.js":"/* eslint-disable import/no-unresolved */\n\nlet pkg;\ntry {\n  pkg = require('../package.json');\n} catch (err) {\n  pkg = require('../../package.json');\n}\n\nmodule.exports = pkg;\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/bin/now-deploy.js":"#!/usr/bin/env node\n\n// Native\nconst { resolve } = require('path');\n\n// Packages\nconst Progress = require('progress');\nconst fs = require('fs-promise');\nconst bytes = require('bytes');\nconst chalk = require('chalk');\nconst minimist = require('minimist');\nconst ms = require('ms');\nconst flatten = require('arr-flatten');\nconst dotenv = require('dotenv');\nconst { eraseLines } = require('ansi-escapes');\n\n// Ours\nconst copy = require('../lib/copy');\nconst login = require('../lib/login');\nconst cfg = require('../lib/cfg');\nconst { version } = require('../lib/pkg');\nconst Logger = require('../lib/build-logger');\nconst Now = require('../lib');\nconst toHumanPath = require('../lib/utils/to-human-path');\nconst promptOptions = require('../lib/utils/prompt-options');\nconst { handleError, error } = require('../lib/error');\nconst { fromGit, isRepoPath, gitPathParts } = require('../lib/git');\nconst readMetaData = require('../lib/read-metadata');\nconst checkPath = require('../lib/utils/check-path');\nconst { reAlias, assignAlias } = require('../lib/re-alias');\nconst exit = require('../lib/utils/exit');\nconst logo = require('../lib/utils/output/logo');\nconst cmd = require('../lib/utils/output/cmd');\nconst info = require('../lib/utils/output/info');\nconst wait = require('../lib/utils/output/wait');\nconst NowPlans = require('../lib/plans');\nconst promptBool = require('../lib/utils/input/prompt-bool');\n\nconst argv = minimist(process.argv.slice(2), {\n  string: ['config', 'token', 'name', 'alias'],\n  boolean: [\n    'help',\n    'version',\n    'debug',\n    'force',\n    'links',\n    'login',\n    'no-clipboard',\n    'forward-npm',\n    'docker',\n    'npm',\n    'static'\n  ],\n  alias: {\n    env: 'e',\n    dotenv: 'E',\n    help: 'h',\n    config: 'c',\n    debug: 'd',\n    version: 'v',\n    force: 'f',\n    token: 't',\n    forceSync: 'F',\n    links: 'l',\n    login: 'L',\n    public: 'p',\n    'no-clipboard': 'C',\n    'forward-npm': 'N',\n    name: 'n',\n    alias: 'a'\n  }\n});\n\nconst help = () => {\n  console.log(\n    `\n  ${chalk.bold(`${logo} now`)} [options] <command | path>\n\n  ${chalk.dim('Commands:')}\n\n    ${chalk.dim('Cloud')}\n\n      deploy               [path]       Performs a deployment ${chalk.bold('(default)')}\n      ls | list            [app]        List deployments\n      rm | remove          [id]         Remove a deployment\n      ln | alias           [id] [url]   Configures aliases for deployments\n      domains              [name]       Manages your domain names\n      certs                [cmd]        Manages your SSL certificates\n      secrets              [name]       Manages your secret environment variables\n      dns                  [name]       Manages your DNS records\n      open                              Open the latest deployment for the project\n      help                 [cmd]        Displays complete help for [cmd]\n\n    ${chalk.dim('Administrative')}\n\n      billing | cc         [cmd]        Manages your credit cards and billing methods\n      upgrade | downgrade  [plan]       Upgrades or downgrades your plan\n\n  ${chalk.dim('Options:')}\n\n    -h, --help                Output usage information\n    -v, --version             Output the version number\n    -n, --name                Set the name of the deployment\n    -c ${chalk.underline('FILE')}, --config=${chalk.underline('FILE')}    Config file\n    -d, --debug               Debug mode [off]\n    -f, --force               Force a new deployment even if nothing has changed\n    -t ${chalk.underline('TOKEN')}, --token=${chalk.underline('TOKEN')}   Login token\n    -L, --login               Configure login\n    -l, --links               Copy symlinks without resolving their target\n    -p, --public              Deployment is public (${chalk.dim('`/_src`')} is exposed) [on for oss, off for premium]\n    -e, --env                 Include an env var (e.g.: ${chalk.dim('`-e KEY=value`')}). Can appear many times.\n    -E ${chalk.underline('FILE')}, --dotenv=${chalk.underline('FILE')}    Include env vars from .env file. Defaults to '.env'\n    -C, --no-clipboard        Do not attempt to copy URL to clipboard\n    -N, --forward-npm         Forward login information to install private npm modules\n\n  ${chalk.dim('Enforcable Types (when both package.json and Dockerfile exist):')}\n\n    --npm                     Node.js application\n    --docker                  Docker container\n    --static                  Static file hosting\n\n  ${chalk.dim('Examples:')}\n\n  ${chalk.gray('–')} Deploys the current directory\n\n    ${chalk.cyan('$ now')}\n\n  ${chalk.gray('–')} Deploys a custom path ${chalk.dim('`/usr/src/project`')}\n\n    ${chalk.cyan('$ now /usr/src/project')}\n\n  ${chalk.gray('–')} Deploys a GitHub repository\n\n    ${chalk.cyan('$ now user/repo#ref')}\n\n  ${chalk.gray('–')} Deploys a GitHub, GitLab or Bitbucket repo using its URL\n\n    ${chalk.cyan('$ now https://gitlab.com/user/repo')}\n\n  ${chalk.gray('–')} Deploys with ENV vars\n\n    ${chalk.cyan('$ now -e NODE_ENV=production -e MYSQL_PASSWORD=@mysql-password')}\n\n  ${chalk.gray('–')} Displays comprehensive help for the subcommand ${chalk.dim('`list`')}\n\n    ${chalk.cyan('$ now help list')}\n`\n  );\n};\n\nlet path = argv._[0];\n\nif (path) {\n  // If path is relative: resolve\n  // if path is absolute: clear up strange `/` etc\n  path = resolve(process.cwd(), path);\n} else {\n  path = process.cwd();\n}\n\n// If the current deployment is a repo\nconst gitRepo = {};\n\n// Options\nlet forceNew = argv.force;\nconst debug = argv.debug;\nconst clipboard = !argv['no-clipboard'];\nconst forwardNpm = argv['forward-npm'];\nconst forceSync = argv.forceSync;\nconst shouldLogin = argv.login;\nconst followSymlinks = !argv.links;\nconst wantsPublic = argv.public;\nconst deploymentName = argv.name || false;\nconst apiUrl = argv.url || 'https://api.zeit.co';\nconst isTTY = process.stdout.isTTY;\nconst quiet = !isTTY;\nconst autoAliases = typeof argv.alias === 'undefined'\n  ? false\n  : flatten([argv.alias]);\n\nif (argv.config) {\n  cfg.setConfigFile(argv.config);\n}\n\nif (Array.isArray(autoAliases)) {\n  console.log(\n    `${chalk.red('Deprecated!')} The option ${chalk.grey('--alias')} will be removed soon.`\n  );\n  console.log('Read more about the new way here: http://bit.ly/2l2v5Fg\\n');\n}\n\n// Create a new deployment if user changed\n// the name or made _src public.\n// This should just work fine because it doesn't\n// force a new sync, it just forces a new deployment.\nif (deploymentName || wantsPublic) {\n  forceNew = true;\n}\n\nconst config = cfg.read();\nconst alwaysForwardNpm = config.forwardNpm;\n\nif (argv.h || argv.help) {\n  help();\n  exit(0);\n} else if (argv.v || argv.version) {\n  console.log(version);\n  process.exit(0);\n} else if (!(argv.token || config.token) || shouldLogin) {\n  login(apiUrl)\n    .then(token => {\n      if (shouldLogin) {\n        console.log('> Logged in successfully. Token saved in ~/.now.json');\n        process.exit(0);\n      } else {\n        sync(token).catch(err => {\n          error(`Unknown error: ${err}\\n${err.stack}`);\n          process.exit(1);\n        });\n      }\n    })\n    .catch(e => {\n      error(`Authentication error – ${e.message}`);\n      process.exit(1);\n    });\n} else {\n  sync(argv.token || config.token).catch(err => {\n    error(`Unknown error: ${err}\\n${err.stack}`);\n    process.exit(1);\n  });\n}\n\nfunction sync(token) {return __async(function*(){\n  const start = Date.now();\n  const rawPath = argv._[0];\n\n  const planPromise = new NowPlans(apiUrl, token, { debug }).getCurrent();\n\n  const stopDeployment = msg => {\n    error(msg);\n    process.exit(1);\n  };\n\n  const isValidRepo = isRepoPath(rawPath);\n\n  try {\n    yield fs.stat(path);\n  } catch (err) {\n    let repo;\n\n    if (isValidRepo && isValidRepo !== 'no-valid-url') {\n      const gitParts = gitPathParts(rawPath);\n      Object.assign(gitRepo, gitParts);\n\n      const searchMessage = setTimeout(\n        () => {\n          console.log(\n            `> Didn't find directory. Searching on ${gitRepo.type}...`\n          );\n        },\n        500\n      );\n\n      try {\n        repo = yield fromGit(rawPath, debug);\n      } catch (err) {}\n\n      clearTimeout(searchMessage);\n    }\n\n    if (repo) {\n      // Tell now which directory to deploy\n      path = repo.path;\n\n      // Set global variable for deleting tmp dir later\n      // once the deployment has finished\n      Object.assign(gitRepo, repo);\n    } else if (isValidRepo === 'no-valid-url') {\n      stopDeployment(\n        `This URL is neither a valid repository from GitHub, nor from GitLab.`\n      );\n    } else if (isValidRepo) {\n      const gitRef = gitRepo.ref ? `with \"${chalk.bold(gitRepo.ref)}\" ` : '';\n      stopDeployment(\n        `There's no repository named \"${chalk.bold(gitRepo.main)}\" ${gitRef}on ${gitRepo.type}`\n      );\n    } else {\n      stopDeployment(`Could not read directory ${chalk.bold(path)}`);\n    }\n  }\n\n  // Make sure that directory is deployable\n  try {\n    yield checkPath(path);\n  } catch (err) {\n    error(err);\n    return;\n  }\n\n  if (!quiet) {\n    if (gitRepo.main) {\n      const gitRef = gitRepo.ref ? ` at \"${chalk.bold(gitRepo.ref)}\" ` : '';\n      console.log(\n        `> Deploying ${gitRepo.type} repository \"${chalk.bold(gitRepo.main)}\"` +\n          gitRef\n      );\n    } else {\n      console.log(`> Deploying ${chalk.bold(toHumanPath(path))}`);\n    }\n  }\n\n  let deploymentType;\n\n  let hasPackage;\n  let hasDockerfile;\n  let isStatic;\n\n  if (argv.docker) {\n    if (debug) {\n      console.log(`> [debug] Forcing \\`deploymentType\\` = \\`docker\\``);\n    }\n\n    deploymentType = 'docker';\n  } else if (argv.npm) {\n    deploymentType = 'npm';\n  } else if (argv.static) {\n    if (debug) {\n      console.log(`> [debug] Forcing static deployment`);\n    }\n\n    deploymentType = 'npm';\n    isStatic = true;\n  } else {\n    try {\n      yield fs.stat(resolve(path, 'package.json'));\n    } catch (err) {\n      hasPackage = true;\n    }\n\n    [hasPackage, hasDockerfile] = yield Promise.all([\n      yield (() => __async(function*(){\n        try {\n          yield fs.stat(resolve(path, 'package.json'));\n        } catch (err) {\n          return false;\n        }\n        return true;\n      }()))(),\n      yield (() => __async(function*(){\n        try {\n          yield fs.stat(resolve(path, 'Dockerfile'));\n        } catch (err) {\n          return false;\n        }\n        return true;\n      }()))()\n    ]);\n\n    if (hasPackage && hasDockerfile) {\n      if (debug) {\n        console.log('[debug] multiple manifests found, disambiguating');\n      }\n\n      if (isTTY) {\n        try {\n          console.log(\n            `> Two manifests found. Press [${chalk.bold('n')}] to deploy or re-run with --flag`\n          );\n          deploymentType = yield promptOptions([\n            [\n              'npm',\n              `${chalk.bold('package.json')}\\t${chalk.gray('   --npm')} `\n            ],\n            [\n              'docker',\n              `${chalk.bold('Dockerfile')}\\t${chalk.gray('--docker')} `\n            ]\n          ]);\n        } catch (err) {\n          error(err.message);\n          process.exit(1);\n        }\n      } else {\n        error(\n          'Ambiguous deployment (`package.json` and `Dockerfile` found). ' +\n            'Please supply `--npm` or `--docker` to disambiguate.'\n        );\n      }\n    } else if (hasPackage) {\n      if (debug) {\n        console.log(\n          '> [debug] `package.json` found, assuming `deploymentType` = `npm`'\n        );\n      }\n\n      deploymentType = 'npm';\n    } else if (hasDockerfile) {\n      if (debug) {\n        console.log(\n          '> [debug] `Dockerfile` found, assuming `deploymentType` = `docker`'\n        );\n      }\n\n      deploymentType = 'docker';\n    } else {\n      if (debug) {\n        console.log(\n          '> [debug] No manifest files found, assuming static deployment'\n        );\n      }\n\n      isStatic = true;\n    }\n  }\n\n  const { nowConfig } = yield readMetaData(path, {\n    deploymentType,\n    deploymentName,\n    isStatic,\n    quiet: true\n  });\n\n  const now = new Now(apiUrl, token, { debug });\n\n  let dotenvConfig;\n  let dotenvOption;\n\n  if (argv.dotenv) {\n    dotenvOption = argv.dotenv;\n  } else if (nowConfig && nowConfig.dotenv) {\n    dotenvOption = nowConfig.dotenv;\n  }\n\n  if (dotenvOption) {\n    const dotenvFileName = typeof dotenvOption === 'string'\n      ? dotenvOption\n      : '.env';\n\n    if (!fs.existsSync(dotenvFileName)) {\n      error(`--dotenv flag is set but ${dotenvFileName} file is missing`);\n      return process.exit(1);\n    }\n\n    const dotenvFile = yield fs.readFile(dotenvFileName);\n    dotenvConfig = dotenv.parse(dotenvFile);\n  }\n\n  // Merge `now.env` from package.json with `-e` arguments.\n  const pkgEnv = nowConfig && nowConfig.env;\n  const envs = [\n    ...Object.keys(dotenvConfig || {}).map(k => `${k}=${dotenvConfig[k]}`),\n    ...Object.keys(pkgEnv || {}).map(k => `${k}=${pkgEnv[k]}`),\n    ...[].concat(argv.env || [])\n  ];\n\n  let secrets;\n  const findSecret = uidOrName => __async(function*(){\n    if (!secrets) {\n      secrets = yield now.listSecrets();\n    }\n\n    return secrets.filter(secret => {\n      return secret.name === uidOrName || secret.uid === uidOrName;\n    });\n  }());\n\n  const env_ = yield Promise.all(\n    envs.map(kv => __async(function*(){\n      if (typeof kv !== 'string') {\n        error('Env key and value missing');\n        return process.exit(1);\n      }\n\n      const [key, ...rest] = kv.split('=');\n      let val;\n\n      if (rest.length > 0) {\n        val = rest.join('=');\n      }\n\n      if (/[^A-z0-9_]/i.test(key)) {\n        error(\n          `Invalid ${chalk.dim('-e')} key ${chalk.bold(`\"${chalk.bold(key)}\"`)}. Only letters, digits and underscores are allowed.`\n        );\n        return process.exit(1);\n      }\n\n      if (!key) {\n        error(`Invalid env option ${chalk.bold(`\"${kv}\"`)}`);\n        return process.exit(1);\n      }\n\n      if (val === undefined) {\n        if (key in process.env) {\n          console.log(\n            `> Reading ${chalk.bold(`\"${chalk.bold(key)}\"`)} from your env (as no value was specified)`\n          );\n          // Escape value if it begins with @\n          val = process.env[key].replace(/^@/, '\\\\@');\n        } else {\n          error(\n            `No value specified for env ${chalk.bold(`\"${chalk.bold(key)}\"`)} and it was not found in your env.`\n          );\n          return process.exit(1);\n        }\n      }\n\n      if (val[0] === '@') {\n        const uidOrName = val.substr(1);\n        const secrets = yield findSecret(uidOrName);\n        if (secrets.length === 0) {\n          if (uidOrName === '') {\n            error(\n              `Empty reference provided for env key ${chalk.bold(`\"${chalk.bold(key)}\"`)}`\n            );\n          } else {\n            error(\n              `No secret found by uid or name ${chalk.bold(`\"${uidOrName}\"`)}`\n            );\n          }\n          return process.exit(1);\n        } else if (secrets.length > 1) {\n          error(\n            `Ambiguous secret ${chalk.bold(`\"${uidOrName}\"`)} (matches ${chalk.bold(secrets.length)} secrets)`\n          );\n          return process.exit(1);\n        }\n\n        val = { uid: secrets[0].uid };\n      }\n\n      return [key, typeof val === 'string' ? val.replace(/^\\\\@/, '@') : val];\n    }()))\n  );\n\n  const env = {};\n  env_.filter(v => Boolean(v)).forEach(([key, val]) => {\n    if (key in env) {\n      console.log(\n        `> ${chalk.yellow('NOTE:')} Overriding duplicate env key ${chalk.bold(`\"${key}\"`)}`\n      );\n    }\n\n    env[key] = val;\n  });\n\n  try {\n    yield now.create(path, {\n      env,\n      deploymentType,\n      deploymentName,\n      followSymlinks,\n      forceNew,\n      forceSync,\n      forwardNpm: alwaysForwardNpm || forwardNpm,\n      quiet,\n      wantsPublic,\n      isStatic\n    });\n  } catch (err) {\n    if (debug) {\n      console.log(`> [debug] error: ${err}\\n${err.stack}`);\n    }\n\n    handleError(err);\n    process.exit(1);\n  }\n\n  const { url } = now;\n  const elapsed = ms(new Date() - start);\n\n  if (isTTY) {\n    if (clipboard) {\n      try {\n        yield copy(url);\n        console.log(\n          `${chalk.cyan('> Ready!')} ${chalk.bold(url)} (copied to clipboard) [${elapsed}]`\n        );\n      } catch (err) {\n        console.log(\n          `${chalk.cyan('> Ready!')} ${chalk.bold(url)} [${elapsed}]`\n        );\n      }\n    } else {\n      console.log(`> ${url} [${elapsed}]`);\n    }\n  } else {\n    process.stdout.write(url);\n  }\n\n  const startU = new Date();\n\n  const complete = () => {\n    if (!quiet) {\n      const elapsedU = ms(new Date() - startU);\n      console.log(`> Sync complete (${bytes(now.syncAmount)}) [${elapsedU}] `);\n      console.log('> Initializing…');\n    }\n\n    // Close http2 agent\n    now.close();\n\n    // Show build logs\n    printLogs(now.host, token);\n  };\n\n  const plan = yield planPromise;\n\n  if (plan.id === 'oss') {\n    info(\n      `You are on the OSS plan. Your code will be made ${chalk.bold('public')}.`\n    );\n\n    let proceed;\n    try {\n      const label = 'Are you sure you want to proceed with the deployment?';\n      proceed = yield promptBool(label, { trailing: eraseLines(2) });\n    } catch (err) {\n      if (err.message === 'USER_ABORT') {\n        proceed = false;\n      } else {\n        throw err;\n      }\n    }\n\n    if (!proceed) {\n      const stopSpinner = wait('Canceling deployment');\n      now.remove(now.id, { hard: true });\n      stopSpinner();\n      info('Deployment aborted. No files were synced.');\n      info(`You can upgrade by running ${cmd('now upgrade')}.`);\n      return exit();\n    }\n  }\n\n  if (now.syncAmount) {\n    const bar = new Progress('> Upload [:bar] :percent :etas', {\n      width: 20,\n      complete: '=',\n      incomplete: '',\n      total: now.syncAmount\n    });\n\n    now.upload();\n\n    now.on('upload', ({ names, data }) => {\n      const amount = data.length;\n      if (debug) {\n        console.log(\n          `> [debug] Uploaded: ${names.join(' ')} (${bytes(data.length)})`\n        );\n      }\n      bar.tick(amount);\n    });\n\n    now.on('complete', complete);\n\n    now.on('error', err => {\n      error('Upload failed');\n      handleError(err);\n      process.exit(1);\n    });\n  } else {\n    if (!quiet) {\n      console.log(`> Initializing…`);\n    }\n\n    // Close http2 agent\n    now.close();\n\n    // Show build logs\n    printLogs(now.host, token);\n  }\n}())}\n\nfunction printLogs(host, token) {\n  // Log build\n  const logger = new Logger(host, token, { debug, quiet });\n\n  logger.on('error', err => __async(function*(){\n    if (!quiet) {\n      if (err && err.type === 'BUILD_ERROR') {\n        error(\n          `The build step of your project failed. To retry, run ${cmd('now --force')}.`\n        );\n      } else {\n        error('Deployment failed');\n      }\n    }\n\n    if (gitRepo && gitRepo.cleanup) {\n      // Delete temporary directory that contains repository\n      gitRepo.cleanup();\n\n      if (debug) {\n        console.log(`> [debug] Removed temporary repo directory`);\n      }\n    }\n    process.exit(1);\n  }()));\n\n  logger.on('close', () => __async(function*(){\n    if (Array.isArray(autoAliases)) {\n      const aliasList = autoAliases.filter(item => item !== '');\n\n      if (aliasList.length > 0) {\n        const assignments = [];\n\n        for (const alias of aliasList) {\n          assignments.push(assignAlias(alias, token, host, apiUrl, debug));\n        }\n\n        yield Promise.all(assignments);\n      } else {\n        yield reAlias(token, host, help, exit, apiUrl, debug);\n      }\n    }\n\n    if (!quiet) {\n      console.log(`${chalk.cyan('> Deployment complete!')}`);\n    }\n\n    if (gitRepo && gitRepo.cleanup) {\n      // Delete temporary directory that contains repository\n      gitRepo.cleanup();\n\n      if (debug) {\n        console.log(`> [debug] Removed temporary repo directory`);\n      }\n    }\n\n    process.exit(0);\n  }()));\n}\n\nfunction __async(g){return new Promise(function(s,j){function c(a,x){try{var r=g[x?\"throw\":\"next\"](a)}catch(e){j(e);return}r.done?s(r.value):Promise.resolve(r.value).then(c,d)}function d(e){c(e,1)}c()})}\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/lib/copy.js":"// Packages\nconst { copy: _copy } = require('copy-paste');\n\nfunction copy(text) {\n  return new Promise((resolve, reject) => {\n    _copy(text, err => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve();\n    });\n  });\n}\n\nmodule.exports = copy;\n","/home/travis/build/npmtest/node-npmtest-now/node_modules/now/build/lib/login.js":"// Native\nconst os = require('os');\n\n// Packages\nconst { stringify: stringifyQuery } = require('querystring');\nconst chalk = require('chalk');\nconst fetch = require('node-fetch');\nconst { validate } = require('email-validator');\nconst readEmail = require('email-prompt');\nconst ora = require('ora');\n\n// Ours\nconst pkg = require('./pkg');\nconst ua = require('./ua');\nconst cfg = require('./cfg');\nconst info = require('./utils/output/info');\nconst promptBool = require('./utils/input/prompt-bool');\n\nfunction getVerificationData(url, email) {return __async(function*(){\n  const tokenName = `Now CLI ${os.platform()}-${os.arch()} ${pkg.version} (${os.hostname()})`;\n  const data = JSON.stringify({ email, tokenName });\n  const res = yield fetch(`${url}/now/registration`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Length': Buffer.byteLength(data),\n      'User-Agent': ua\n    },\n    body: data\n  });\n\n  if (res.status !== 200) {\n    throw new Error('Verification error');\n  }\n\n  const body = yield res.json();\n  return body;\n}())}\n\nfunction verify(url, email, verificationToken) {return __async(function*(){\n  const query = {\n    email,\n    token: verificationToken\n  };\n\n  const res = yield fetch(\n    `${url}/now/registration/verify?${stringifyQuery(query)}`,\n    {\n      headers: { 'User-Agent': ua }\n    }\n  );\n  const body = yield res.json();\n  return body.token;\n}())}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\nfunction register(url, { retryEmail = false } = {}) {return __async(function*(){\n  let email;\n  try {\n    email = yield readEmail({ invalid: retryEmail });\n  } catch (err) {\n    process.stdout.write('\\n');\n    throw err;\n  }\n\n  process.stdout.write('\\n');\n\n  info(\n    `By continuing, you declare that you agree with ${chalk.bold('https://zeit.co/terms')} and ${chalk.bold('https://zeit.co/privacy.')}`\n  );\n  if (!(yield promptBool('Continue?'))) {\n    info('Aborted.');\n    process.exit(); // eslint-disable-line unicorn/no-process-exit\n  }\n\n  if (!validate(email)) {\n    return register(url, { retryEmail: true });\n  }\n\n  const { token, securityCode } = yield getVerificationData(url, email);\n  console.log(\n    `> Please follow the link sent to ${chalk.bold(email)} to log in.`\n  );\n\n  if (securityCode) {\n    console.log(\n      `> Verify that the provided security code in the email matches ${chalk.cyan(chalk.bold(securityCode))}.`\n    );\n  }\n\n  process.stdout.write('\\n');\n\n  const spinner = ora({\n    text: 'Waiting for confirmation...',\n    color: 'black'\n  }).start();\n\n  let final;\n\n  /* eslint-disable no-await-in-loop */\n  do {\n    yield sleep(2500);\n\n    try {\n      final = yield verify(url, email, token);\n    } catch (err) {}\n  } while (!final);\n  /* eslint-enable no-await-in-loop */\n\n  spinner.text = 'Confirmed email address!';\n  spinner.stopAndPersist('✔');\n\n  process.stdout.write('\\n');\n\n  return { email, token: final };\n}())}\n\nmodule.exports = function(url) {return __async(function*(){\n  const loginData = yield register(url);\n  cfg.merge(loginData);\n  return loginData.token;\n}())};\n\nfunction __async(g){return new Promise(function(s,j){function c(a,x){try{var r=g[x?\"throw\":\"next\"](a)}catch(e){j(e);return}r.done?s(r.value):Promise.resolve(r.value).then(c,d)}function d(e){c(e,1)}c()})}\n"}